# -*- coding: utf-8 -*-
"""Random Forest project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o_HS0RCh1nnEzmb8Q9rq6aZfcn160weP
"""

pip install category_encoders

import sys                             # Read system parameters
import os                              # Interact with the operating system
import numpy as np                     # Work with multi-dimensional arrays and matrices
import pandas as pd                    # Manipulate and analyze data
import matplotlib                      # Create 2D charts
import matplotlib as mpl
import matplotlib.pyplot as plt
import scipy as sp                     # Perform scientific computing and advanced mathematics
import sklearn                         # Perform data mining and analysis
import seaborn as sb                   # Perform data visualization
from sklearn.preprocessing import LabelEncoder
from category_encoders.binary import BinaryEncoder

print('Libraries used in this project:')
print('- NumPy {}'.format(np.__version__))
print('- Pandas {}'.format(pd.__version__))
print('- Matplotlib {}'.format(matplotlib.__version__))
print('- SciPy {}'.format(sp.__version__))
print('- Scikit-learn {}'.format(sklearn.__version__))
print('- Python {}\n'.format(sys.version))

from google.colab import drive
drive.mount("/content/drive")

import pandas as pd
df1=pd.read_csv('/content/final dataset 2.csv')
print(df1.head().to_string())

df1.isnull().sum()

df1=df1.dropna()
df1.isnull().sum()

df1.columns

df = pd.get_dummies(df1, columns=['Age', 'Gender', 'Occupation', 'Days_Indoors', 'Growing_Stress',
       'Quarantine_Frustrations', 'Changes_Habits', 'Mental_Health_History',
       'Weight_Change', 'Mood_Swings', 'Coping_Struggles', 'Work_Interest',
       'Social_Weakness'])
print(df.head().to_string())

from sklearn.model_selection import train_test_split
label_columns=['depressed']
training_columns=['living_expenses', 'other_expenses', 'depressed', 'Age_16-20',
       'Age_20-25', 'Age_25-30', 'Age_30-Above', 'Gender_Female',
       'Gender_Male', 'Occupation_Business', 'Occupation_Corporate',
       'Occupation_Housewife', 'Occupation_Others', 'Occupation_Student',
       'Days_Indoors_1-14 days', 'Days_Indoors_15-30 days',
       'Days_Indoors_31-60 days', 'Days_Indoors_Go out Every day',
       'Days_Indoors_More than 2 months', 'Growing_Stress_Maybe',
       'Growing_Stress_No', 'Growing_Stress_Yes',
       'Quarantine_Frustrations_Maybe', 'Quarantine_Frustrations_No',
       'Quarantine_Frustrations_Yes', 'Changes_Habits_Maybe',
       'Changes_Habits_No', 'Changes_Habits_Yes',
       'Mental_Health_History_Maybe', 'Mental_Health_History_No',
       'Mental_Health_History_Yes', 'Weight_Change_Maybe', 'Weight_Change_No',
       'Weight_Change_Yes', 'Mood_Swings_High', 'Mood_Swings_Low',
       'Mood_Swings_Medium', 'Coping_Struggles_No', 'Coping_Struggles_Yes',
       'Work_Interest_Maybe', 'Work_Interest_No', 'Work_Interest_Yes',
       'Social_Weakness_Maybe', 'Social_Weakness_No', 'Social_Weakness_Yes']
x_train,x_test,y_train,y_test=train_test_split(df[training_columns],df[label_columns],train_size=0.7)
print(x_train.shape)
print(x_test.shape)
print(y_train.shape)
print(y_test.shape)

!pip install scikit-learn==1.2.2

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score,precision_score,f1_score,recall_score

# Recreate the forest with the same parameters.
forest = RandomForestClassifier(n_estimators = 100,
                                criterion = 'gini',
                                max_depth = 6,
                                min_samples_leaf = 10,
                                min_samples_split = 78,
                                bootstrap = True,
                                random_state = 1912)

# Fit the forest to the training data.
forest.fit(x_train, y_train)

# Predict the classes for the test data.
prediction = forest.predict(x_test)


accuracyscore = accuracy_score(y_test, prediction)
precisionscore=precision_score(y_test,prediction)
f1score=f1_score(y_test,prediction)
recallscore=recall_score(y_test,prediction)



print('Accuracy: {:.0f}%'.format(accuracyscore * 100))
print('Precision:',precisionscore)
print('f1 score: {:.2f}'.format(f1score))
print('Recall: {:.2f}'.format(recallscore))

predicted_values=y_test.copy()
predicted_values['predicted']=prediction
print(predicted_values.to_string())